# Pragmatic Programmers - Depot App, Rails 8
	* Going to try and build this app in a newer way.
	* Using Docker, Rails, Inertia.js, Vue, and Tailwind CSS.

	* Dev VM:   /docker_rails/learning_or_tests/rails8_depot

## Index

    Inertia.js & Vue.js & Tailwind CSS Notes and Resources

	Create New Rails App

        Create docker-compose.yml file and fill in with

        Generate Rails Application

    Further Setup Dockerfile and docker-compose.ym

    keep sessions for 9 hrs only

	Add Exception Notifier Gem

	.

---

## Inertia.js & Vue.js & Tailwind CSS Notes and Resources

	Rails | Inertia.js | Vue.js | Tailwind CSS (better for building component-based single-page apps)

	1) Links

		https://inertia-rails.netlify.app/

		https://github.com/skryukov/inertia_rails-contrib

		https://evilmartians.com/chronicles/inertiajs-in-rails-a-new-era-of-effortless-integration
			* Guide on how to build Rails application.

	2) Start build an app:  (https://evilmartians.com/chronicles/inertiajs-in-rails-a-new-era-of-effortless-integration)

	Let’s see how to start a new Rails application with Inertia.js using the inertia_rails-contrib generators. First, we’ll set up a new Rails application, skipping the default JavaScript and asset pipeline setup:

	rails new inertia_rails_example --skip-js --skip-asset-pipeline

	cd inertia_rails_example

	Next, we’ll install the inertia_rails-contrib gem and run the installation generator:

	bundle add inertia_rails-contrib

	bin/rails generate inertia:install

	The generator will install the Vite frontend build tool, optionally installing Tailwind CSS, and asking you to choose a frontend framework; we’ll select Vue.

---

## Create New Rails App

1) $ touch Dockerfile

    What Ruby Images does Docker support?
        https://hub.docker.com/_/ruby

    Initial Dockerfile content to generate Rails app:
		FROM ruby:3.3.6
		LABEL maintainer="<name> <email address>"

		# The base image is based on Debian, and we use apt to install packages.  Apt
		# will use the DEBIAN_FRONTEND environment variable to allow limited control
		# in its behavior.  In this case, we don't want it to ask interactive questions
		# as that will make the docker build command appear to be hung.
		ENV DEBIAN_FRONTEND noninteractive

		# Download latest package information and install packages.
		# -y option says to answer yes to any prompts.
		# -qq option enables quiet mode to reduce printed output.
		# Note: it is always recommended to combine the apt-get update and
		#       apt-get install commands into a single RUN instruction.
		# apt-transport-https = allow apt to work with https-based sources
		# RUN apt-get update -yqq
		# rm -rf /var/lib/apt/lists/* == removes nodejs package lists.
		RUN apt-get update -y && apt-get --force-yes install -y --no-install-recommends  \
			build-essential \
			vim \
			curl \
			less \
			libmariadb-dev \
			sqlite3 \
			which \
			git && \
			rm -rf /var/lib/apt/lists/*
		# redis-tools && \    THE 2nd to last line needs appersands.


		# Change some environment variables from the defaults set in the official Docker image for Ruby
		#RUN echo $PATH

		# Install Nodejs
		#TODO COPY scripts/install_nodejs.sh ./
		#TODO RUN ./install_nodejs.sh && rm ./install_nodejs.sh
		#TODO RUN echo "NODE Version:" && node --version

		# Create and define the node_modules's cache directory.
		#TODO RUN mkdir /usr/src/cache
		#TODO WORKDIR /usr/src/cache

		# Install the application's dependencies into the node_modules's cache directory.
		#TODO COPY package.json ./
		#TODO COPY package-lock.json ./
		#TODO RUN npm install
		#TODO RUN echo "NPM Version:" && npm --version

		# Install Yarn globally
		#TODO RUN npm install --global yarn

		# Make this the current working directory for the image. So we can execute Rails \
		# cmds against image.
		RUN mkdir -p /usr/src/app

		# Gemfile Caching Trick
		# Note: When using COPY with more than one source file, the destination must
		#       be a directory and end with a /
		# 1. This creates a separate, independent layer. Docker's cache for this layer
		#    will only be busted if either of these two files (Gemfile & Gemfile.lcok) change.
		#TODO COPY Gemfile* /usr/src/app/

		# CD or change into the working directory.
		WORKDIR /usr/src/app

### Create docker-compose.yml file and fill in with

	services:
	  app:
		build:
		  context: .
		  dockerfile: Dockerfile
		# A volume is set up that mounts the current path of the host machine to
		# the folder /usr/src/app in the container.
		# The volume is essential so that when we generate the Rails application in
		# the container, the template files will persist in the host filesystem.
		volumes:
		  - .:/usr/src/app
		ports:
		  - "3030:3000"


### Generate Rails Application

    $ docker compose run --service-ports app bash
        * If you do want the service’s ports to be created and mapped to the host, specify the --service-ports

    Once inside container:

    node -v

    # May not need to run these commands...
    apt-get remove nodejs -y
    apt-get purge nodejs -y
    apt-get autoremove -y
    apt-get update

    # Installing nodejs LTS version 22
    curl -sL https://deb.nodesource.com/setup_22.x | bash
    apt-get install nodejs -y
    npm install
    # If above cmd produces an error where package.json file is not found then run:
        $ npm init --yes


    # Run Update and Install
    apt-get update
    apt-get install nodejs -y
    echo "NODE Version:" && node --version
    npm install
    echo "NPM Version:" && npm --version
    npm install --global yarn


    Once inside the container, we can install Rails and generate a new application
    $ gem install rails
    Or a specific version:
    $ gem install rails -v 7.1.3.4
        => rails 7.1.3.4 was installed.
            A new release of RubyGems is available: 3.4.10 → 3.5.20!
            Run `gem update --system 3.5.20` to update your installation.

    # Generates new Rails application with a name and add files to the location specified.
    root@c430440b3179:/usr/src/app# rails new depot --skip-js --skip-asset-pipeline
		Example of creating API app: root@c430440b3179:/usr/src/app# rails _7.2.1_ new fleet_vehicles --api --database=mysql --skip-test
        Example of creating a full app: root@c430440b3179:/usr/src/app# rails _7.2.0_ new tsa -j=esbuild -d=mysql --skip-test --css=bootstrap

    # Copy the contents from within "depot" to "/usr/src/app/"
    $ cp -a /usr/src/app/depot/. /usr/src/app/
        * The -a option is an improved recursive option, that preserve all file attributes, and also preserve symlinks.
        * The . at end of the source path is a specific cp syntax that allow to copy all files and folders, included hidden ones.

    # Remove the auto-generated directory.
    rm -rf /usr/src/app/depot

    # Run the below too which creates package-lock.json
    npm install

	# Further Setup and Installations
	root@c430440b3179:/usr/src/app# bundle add inertia_rails-contrib
	root@c430440b3179:/usr/src/app# bin/rails generate inertia:install
		Would you like to install Vite Ruby? y
		Would you like to use TypeScript? y
		Would you like to install Tailwind CSS? y
		What framework do you want to use with Inertia? vue
		... conflit bin/dev
		Overwrite? y


    # Should be able to start the application at this point and visit it via browser.
    # And did receive an error both in console and in browser about not being able to connect to MySQL.
    root@c430440b3179:/usr/src/app# rails s -b 0.0.0.0

    root@c430440b3179:/usr/src/app# exit

    # Will need to apply directory and file permissions
    $ sudo chown -R $USER:$USER .

---

## Further Setup Dockerfile and docker-compose.ym

1) Edited Dockerfile to include further instructions.

    a) Looks like Rails now produces its own Dockerfile and overwrote what I had.
        So. Made a copy of the Dockerfile to FromRailsDockerfile.txt
        And repasted in what I originally had in the Dockerfile.

    b) Created new /scripts directory and added/populated install_nodejs.sh
        Make .sh file executable:
        $ sudo chmod +x docker_entrypoint_staging.sh

    c) Uncomment "TODO" lines.

        Added instructions for node_module's cache directory.

        Added instructions for copying package.json files.

        Look at Dockerfile of this app to see what was done.

    d) Added instructions for entrypoint file. AND created entrypoint file.

        ... to make .sh file executable:
        $ sudo chmod +x docker_entrypoint_dev.sh

        REMEMBER to uncomment the compiling of Rails assets!!!

2) Edited docker-compose.yml to include further instructions.

    # If using Puma server will need to edit
    PIDFILE: /tmp/pids/passenger.3000.pid

3) If using Puma gem/app-server

    .

    Add app.env
    $ touch app.env


4) Copy in content to .gitignore file.

5) Copy in content to .dockerignore file.

6) git commit -a -m "initial commit"

7) Add secrets and edit database.yml file

    a) Populate app.env file with secrets
        And get secret token by going into rbenv application and running:
        $ bundle exec rake secret
        Or
        $ docker exec -it cals_forms_dev bash
        > bundle exec rails secret

    b) Edit /config/database.yml file.

    c) At the end of `/config/environments/test.rb` and `/config/environments/development.rb` and `/config/environments/production.rb` and `/config/environments/staging.rb` add the below. And yes if staging.rb doesn't exist will need to copy production.rb and rename to staging.rb

		# Rails server 'missing secret_key_base':
		# This has been added by developer b/c on the Rails servers, Rails app isn't grabbing
		# 'secret_key_base' from Rails server Env successfully. So ended up manually helping
		# Rails!
		# config.secret_key_base = ENV['SECRET_KEY_BASE']
		# Instead of using Figaro gem, have removed it and am assigning value within application.
		config.secret_key_base = ENV.fetch('SECRET_KEY_BASE')

8) Start up application see if it runs and no errors in console with current additions.

    localhost:3030

9.5) Make sure database and tables are using "collation" of utf8mb4_unicode_ci

10)
git ci -a -m "Initial Commit #2:
a) Application boots up successfully:
b) Edited database.yml file and added secrets.
c) Added secret-key-base value to environment files.
d) And other minor edits."

---

## keep sessions for 9 hrs only

    * Added new file with content. New file: config/initializers/session_store.rb

---

## Add Exception Notifier Gem

Skipped this for now ...

---

## Generate Product Resource

1) Generate Product Scaffold

    rails generate inertia:scaffold Product title:string description:text image:attachment price:decimal

    $ sudo chown -R $USER:$USER .

2) Following PragProg PDF book "6. Task A: Creating the Application"

    a) Edit "/db/migrate/..._create_products.rb"

    b) we need to install the tables that Active Storage uses to track the attachments:
        rails active_storage:install

    c) rails db:migrate

    d) $ sudo chown -R $USER:$USER .

    e) localhost:3030/products

    f) Edited db/seeds.rb file.

    g) Restarted docker container.

    h) rails db:seed

    i) $ sudo chown -R $USER:$USER .

    j) Refactored
        /frontend/pages/Product/Index.vue
        /frontend/pages/Product/Form.vue
        /frontend/pages/Product/types.ts
        app/controllers/application_controller.rb

    k)


---

## Chapter 7   Task B: Validation and Unit Testing

    Skipping this section of creating tests.

    If I wanted to continue then I would need to
        a) create test container.
        b) continue with the book "Iteration B2: Unit Testing of Models".

---

## Chapter 8 - Task C: Catalog Display

### C1: Creating the Catalog Listing

1) Creating the Catalog Listing

    rails generate inertia:controller Store index -p

    $ sudo chown -R $USER:$USER .

2) Using ChatGPT, convert index.html.erb over to index.vue (Vue 3)

3) Error. I am getting a browser status error of 404 Not found for "localhost:3030/stylesheets/application.css"

    Fix: commented out "<%#= stylesheet_link_tag "application" %>" within "/views/layouts/application.html.erb"

4) Error. I am not seeing any Products within Index.vue page within browser.
            Index.vue debug line within script tag:
                console.log("Products received:", products);
            Browser console shows "Products received: undefined".

            Fix:
            a) need to pass props within Controller action.
            b) added serialize_products (private method) to Controller action.

### C2: Adding a Page Layout



















LEFT OFF with
	a)
	b) PDF book "Chapter 8 - Task C: Catalog Display"
	c) Next ...

Next
a) Am using https://evilmartians.com/chronicles/inertiajs-in-rails-a-new-era-of-effortless-integration
b)

localhost:3030
localhost:3030/products





















## Rebuild Docker Image and Start Docker Containers
    $ docker ps -a
    $ docker container stop depot_dev   ----\
                                                   $ docker compose down
    $ docker container rm depot_dev     ----/
    $ docker compose build --no-cache --progress=plain
    $ docker compose up -d
	$ docker compose down

## Access Container
    $ docker exec -it depot_dev bash

## To Run RSpec Tests

    # Run RSpec Tests
    $ docker compose -f docker-compose.test.yml build --no-cache --progress=plain
    $ docker compose -f docker-compose.test.yml up -d
    $ docker exec -it depot_test bash
    # rspec spec/
    # exit
    $ docker compose -f docker-compose.test.yml down

